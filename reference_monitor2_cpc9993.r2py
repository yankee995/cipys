"""
Sagar Nemani

NYU Tandon School of Engineering - Cyber Fellows
Information Security and Privacy

Programming Lab 1 - Reference Monitor

This security layer inadequately handles A/B storage for files in RepyV2.

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class ABFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        # local (per object) reference to the underlying file
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'

        if create:
            self.myprint("openfile inside create = true")
            # Checking to see if the file exists in listfiles
            if self.Afn in listfiles():
                self.myprint("file exists")
                self.Afile = openfile(self.Afn, create)
                self.Bfile = openfile(self.Bfn, create)

                AfileData = self.Afile.readat(None, 0)
                self.myprint(AfileData)
                self.Bfile.writeat(AfileData, 0)


            else:
                # Checking to see if the file does not exist in listfiles
                self.Afile = openfile(self.Afn, create)
                self.Bfile = openfile(self.Bfn, create)
                self.myprint("file does not exist")
                self.Afile.writeat('SE', 0)

        else:
            if self.Afn in listfiles():
                self.myprint("create = false")
                try:
                    self.Afile = openfile(self.Afn, create)
                    self.Bfile = openfile(self.Bfn, create)
                except Exception as err:
                    self.myprint("error")
                else:
                    try:
                        self.Afile = openfile(self.Afn, create)
                        self.Bfile = openfile(self.Bfn, create)
                        fp = open(Bfile)
                        while True:
                            nstr = fp.readline()
                            if len(nstr) == 0:
                                break
                            n = int(nstr.rstrip())
                            continue
                            self.Bfile.writeat('SE', 0)

                    except:
                        self.myprint("error")

    def myprint(self, message):
        if mycontext['debug']: log(message)

    def writeat(self, data, offset):
        # Write the requested data to the B file using the sandbox's writeat call
        self.Bfile.writeat(data, offset)

    def readat(self, bytes, offset):
        # Read from the A file using the sandbox's readat...
        return self.Afile.readat(bytes, offset)

    def close(self):
        a_data = self.Afile.readat(None, 0)
        b_data = self.Bfile.readat(None, 0)
        # print(b_data[0])
        self.Afile.close()
        self.Bfile.close()

        # keeps track of the file length (makes sure it is greater than or equal to 1)
        if len(b_data) <= 1:
            exitall()

        elif b_data[0] == 'S' and b_data[-1] == 'E':
            # Discard filename.a and replace with contents of filename.b
            removefile(self.Afn)
            new_file = openfile(self.Afn, True)
            new_file.writeat(b_data, 0)
            new_file.close()

        else:
            # discard filename.b if it is invalid
            removefile(self.Bfn)
            new_file = openfile(self.Bfn, True)
            new_file.writeat(a_data, 0)
            new_file.close()


def ABopenfile(filename, create):
    return ABFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type": ABFile,
                "name": "ABFile",
                "writeat": {"type": "func", "args": (str, int), "exceptions": Exception, "return": (int, type(None)),
                            "target": ABFile.writeat},
                "readat": {"type": "func", "args": ((int, type(None)), (int)), "exceptions": Exception, "return": str,
                           "target": ABFile.readat},
                "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)),
                          "target": ABFile.close}
                }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE: OBJC, ARGS: (str, bool), EXCP: Exception, RETURN: sec_file_def,
                                   TARGET: ABopenfile}

# Execute the user code
secure_dispatch_module()

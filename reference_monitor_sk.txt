"""
This security layer inadequately handles A/B storage for files in RepyV2.

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 

TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"


class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
      if self.Afn not in listfiles():
        self.Afile = openfile(self.Afn,create)
        self.Afile.writeat('SE',0)
      else:
        self.Afile = openfile(self.Afn,False)
      if self.Bfn not in listfiles():
        self.Bfile = openfile(self.Bfn,create)
        self.Bfile.writeat(self.Afile.readat(None,0),0)
      else:
        removefile(self.Bfn)
        self.Bfile = openfile(self.Bfn,create)
        self.Bfile.writeat(self.Afile.readat(None,0),0)
    else:
        self.Afile = openfile(self.Afn,True)
        self.Bfile = openfile(self.Bfn,True)
    mycontext['Lock'] = createlock()
      

  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
      mycontext['Lock'].acquire(True)
      if offset >= 0 and offset <= len(self.Bfile.readat(None,0)):
        self.Bfile.writeat(data,offset)
      mycontext['Lock'].release()
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    mycontext['Lock'].acquire(True)
    if offset >= 0 and len(self.Afile.readat(bytes,offset)) > 0:
      try:
        Adata = self.Afile.readat(bytes,offset)
        mycontext['Lock'].release()
        return Adata
      except:
        mycontext['Lock'].release()
        raise RepyArgumentError
    else:
      mycontext['Lock'].release()
      raise RepyArgumentError

  def close(self):
    mycontext['Lock'].acquire(True)
    AData = self.Afile.readat(None,0)
    BData = self.Bfile.readat(None,0)
    if self.Bfile.readat(None,0).startswith("S") and self.Bfile.readat(None,0).endswith("E"):
      self.Afile.close()
      self.Bfile.close()
      mycontext['Lock'].release()
      removefile(self.Afn)
      self.Afile = openfile(self.Afn, True)
      self.Afile.writeat(BData,0)
      self.Afile.close()
    else:
      self.Afile.close()
      self.Bfile.close()
      mycontext['Lock'].release()
      removefile(self.Bfn)

def ABopenfile(filename, create):
    return ABFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()

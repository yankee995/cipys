"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False

    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      self.Afile.writeat('SE',0)

  def writeat(self,data,offset):

    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)
  
  def filedata(self):
    a_data = self.Afile.readat(None, 0)
    b_data = self.Bfile.readat(None, 0)
    self.Afile.close()
    self.Bfile.close()
    return a_data, b_data
  
  def updateFiledata(self,chkfile,fdata):
    if (chkfile == 'a'):
    	removefile(self.Afn)
    	new_file = openfile(self.Afn, True)
    elif (chkfile == 'b'):
        removefile(self.Bfn)
        new_file = openfile(self.Bfn, True)
    
    new_file.writeat(fdata, 0)
    new_file.close()
    print('update file inner...')
    
  def close(self):
    a_data, b_data=self.filedata()

    if (len(b_data) <= 1) and (b_data == ''):
        exitall()
    elif (b_data[0] == 'S' and b_data[len(b_data) - 1] == 'E'):
        # Discard filename.a and replace with contents of filename.b
        self.updateFiledata('a',b_data)
    else:
        # discard filename.b if it is invalid
        self.updateFiledata('b',a_data)       

#Validate given file. Check characters in the start('S') and end('E').
def validate_file(mFile):
    """
    Validate given file. Check characters in the start('S') and end('E').
    @param mFile: file object -> ABFile.B_file
    @return boolean: indicate validation of .b file
    """
    content = mFile.readat(None, 0)
    if len(content) < 2:
        return False
    elif content[0] == 'S' and content[-1] == 'E':
        return True
    else:
        return False

def ABopenfile(filename, create):
  return ABFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
